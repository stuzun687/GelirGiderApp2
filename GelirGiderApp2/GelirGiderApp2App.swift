// Bu dosya, uygulamanÄ±n ana giriÅŸ noktasÄ±nÄ± ve temel yapÄ±landÄ±rmasÄ±nÄ± iÃ§erir
// Gerekli kÃ¼tÃ¼phaneleri iÃ§e aktarÄ±yoruz
import SwiftUI
import SwiftData
import UserNotifications

// Ana uygulama yapÄ±sÄ± - @main ile uygulamanÄ±n baÅŸlangÄ±Ã§ noktasÄ± olarak iÅŸaretlendi
@main
struct GelirGiderApp2App: App {
    // UIApplicationDelegate protokolÃ¼nÃ¼ uygulayan sÄ±nÄ±fÄ± baÄŸla
    @UIApplicationDelegateAdaptor private var appDelegate: AppDelegate
    
    // SwiftData veritabanÄ± iÃ§in paylaÅŸÄ±lan model konteyneri
    var sharedModelContainer: ModelContainer = {
        // VeritabanÄ± ÅŸemasÄ±nÄ± tanÄ±mla - Transaction modelini iÃ§erir
        let schema = Schema([
            Transaction.self,
        ])
        // Model yapÄ±landÄ±rmasÄ±nÄ± oluÅŸtur (bellekte tutulmayacak ÅŸekilde)
        let modelConfiguration = ModelConfiguration(schema: schema, isStoredInMemoryOnly: false)

        do {
            // Model konteynerini oluÅŸtur ve dÃ¶ndÃ¼r
            return try ModelContainer(for: schema, configurations: [modelConfiguration])
        } catch {
            // Konteyner oluÅŸturulamazsa uygulamayÄ± sonlandÄ±r
            fatalError("Model Konteyneri oluÅŸturulamadÄ±: \(error)")
        }
    }()

    // Uygulama gÃ¶rÃ¼nÃ¼m yapÄ±sÄ±
    var body: some Scene {
        WindowGroup {
            // Ana iÃ§erik gÃ¶rÃ¼nÃ¼mÃ¼nÃ¼ baÅŸlat
            ContentView()
        }
        // VeritabanÄ± konteynerini tÃ¼m gÃ¶rÃ¼nÃ¼mlere saÄŸla
        .modelContainer(sharedModelContainer)
    }
}

// Uygulama delegesi sÄ±nÄ±fÄ± - Bildirim yÃ¶netimi iÃ§in gerekli
class AppDelegate: NSObject, UIApplicationDelegate, UNUserNotificationCenterDelegate {
    // Uygulama baÅŸlatÄ±ldÄ±ÄŸÄ±nda Ã§aÄŸrÄ±lan fonksiyon
    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil) -> Bool {
        
        // Bildirim delegesini ayarla
        UNUserNotificationCenter.current().delegate = self
        
        return true
    }
    
    // Uygulama Ã¶n plandayken bildirim geldiÄŸinde Ã§aÄŸrÄ±lan fonksiyon
    func userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification) async -> UNNotificationPresentationOptions {
        // Uygulama Ã¶n plandayken bile banner gÃ¶ster ve ses Ã§al
        return [.banner, .sound, .badge]
    }
    
    // Bildirime tÄ±klandÄ±ÄŸÄ±nda Ã§aÄŸrÄ±lan fonksiyon
    func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse) async {
        print("ğŸ“± Bildirime tÄ±klandÄ±: \(response.notification.request.identifier)")
    }
}
